{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","SUBJECT_ARRAY","VERB_ARRAY","App","array_name","Math","floor","random","length","array_verb","array_obj","useState","itemText","setItemText","verbText","setVerbText","checked","setChecked","name","setName","verb","setVerb","obj","setObj","sentences","setSentences","sub","setSub","ver","setVer","filterArr","arr","filterElem","result","undefined","i","elem","push","className","style","margin","backgroundColor","join","type","value","onChange","e","target","onClick","Checkbox","color","fontWeight","map","sentence","key","Button","variant","newSub","newVerb","aVerb","aSub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8564cd38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\n\nconst SUBJECT_ARRAY = [\"Kaitlyn\", \"Cathy\", \"Joanne\", \"coffee\", \"boba tea\", \"chocolate\", \"pizza\", \"dumpling\", \"noodle\"]\nconst VERB_ARRAY = [\"enjoys\", \"tastes\", \"plays\", \"likes\", \"wants\", \"owns\"]\nconst TARGET_OF_GREETIING = \"welcome to my website\";\n\nfunction App() {\n\n  const array_name  = SUBJECT_ARRAY[Math.floor(Math.random() * SUBJECT_ARRAY.length)];\n  const array_verb  = VERB_ARRAY[Math.floor(Math.random() * VERB_ARRAY.length)];\n  const array_obj  = SUBJECT_ARRAY[Math.floor(Math.random() * SUBJECT_ARRAY.length)];\n  //[pair] value, setValue \n  const [itemText, setItemText] = useState(\"\")\n  const [verbText, setVerbText] = useState(\"\")\n\n  const [checked, setChecked] = useState(false);\n  const [name, setName] = useState(array_name);\n  const [verb, setVerb] = useState(array_verb);\n  const [obj, setObj] = useState(array_obj);\n\n  const [sentences, setSentences] = useState([`${name} ${verb} ${obj}`]); \n  const [sub, setSub] = useState(SUBJECT_ARRAY);\n  const [ver, setVer] = useState(VERB_ARRAY);\n\n  // Filter a array, traverse through arr\n  function filterArr(arr, filterElem) {\n    let result = [] \n    if (arr === null || arr.length === 0 || filterElem === null || filterElem === undefined)  {\n      return result \n    }\n      //initial value 0, i is index\n    for (let i = 0; i < arr.length; i++){ \n      const elem = arr[i] \n\n      if (elem !== filterElem){\n        result.push(elem)\n      }\n    }\n   return result\n}\n\n  const handleAddItem = () => {\n    setSub([...sub, itemText])\n    setItemText(\"\")  \n  }\n\n  const handleAddVerb = () => {\n    setVer([...ver, verbText])\n    setVerbText(\"\")\n  }\n\n  const handleClick = () => {\n    const newSub = filterArr(sub, obj) \n    const newVerb = filterArr(ver, verb)\n\n    //clear array that are used\n    if (newVerb.length === 0 || newSub.length === 0 ) {\n      if (checked){\n        setSub(newSub)\n        setVer(newVerb)\n      return\n      }   \n    }\n\n    if (ver.length === 0 || sub.length === 0 ) {\n      return\n    }\n    let aVerb  = ver[Math.floor(Math.random() * ver.length)]\n    let aSub  = sub[Math.floor(Math.random() * sub.length)]\n    \n    if (checked) {\n      aVerb  = newVerb[Math.floor(Math.random() * newVerb.length)]\n      aSub  = newSub[Math.floor(Math.random() * newSub.length)]\n    }\n\n    const sentence = `${obj} ${aVerb} ${aSub}`\n    //expend sentence value and push to sentences, array.push\n    setSentences([...sentences, sentence])\n    \n    //call update \n    if (checked) {\n      setSub(newSub)\n      setVer(newVerb)\n    }\n    // Set name to previous obj\n    setName(obj)\n    // Set verb to a random verb in ver/ newVerb\n    setVerb(aVerb)\n    // Set obj to a random obj in sub/ newSub\n    setObj(aSub)\n  }\n  return (\n    <div className=\"App\" style={{margin: '50px', backgroundColor: '#cfe8fc'}}>\n      <div>\n       Hello there, { TARGET_OF_GREETIING }!\n      </div>\n\n      <ol>\n      <p>List of Items: {sub.join(\", \")} </p>\n      <p>Verbs to choose from: {ver.join(\", \")} </p>\n      </ol>\n      <div style={{margin: '10px'}}>    \n      <input type=\"text\" value={itemText} onChange={(e) => {setItemText(e.target.value)}} />\n      <button onClick={handleAddItem} >Add an item</button>          \n      </div>\n\n      <div>        \n      <input type=\"text\" value={verbText} onChange={(e) => {setVerbText(e.target.value)}} />\n      <button onClick={handleAddVerb} >Add an verb</button>          \n      </div>      \n\n      <div>             \n      <Checkbox color= \"Primary\" type=\"checkbox\" checked={checked} onChange={() => {setChecked(!checked)}} />\n      <span><span style={{color:'blue', fontWeight:'bold'}}>Remove verb and object</span> that are used</span>\n      </div>\n\n      <p>Click to see the solitaire</p>\n      <ol>\n      {sentences.map((sentence, i) => (\n        <p key={i}> {sentence} </p>\n      ))}\n      </ol>\n\n      <div>{sub.length === 0 || ver.length === 0 ? <p>Out of items or verbs...</p > : null}</div>\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n          Click me\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}