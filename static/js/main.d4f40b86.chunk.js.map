{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","subject_array","verb_array","App","filterArr","arr","filterElem","console","log","result","length","undefined","i","elem","push","Math","floor","random","array_name","array_verb","array_obj","useState","itemText","setItemText","verbText","setVerbText","checked","setChecked","name","setName","verb","setVerb","obj","setObj","sentences","setSentences","sub","setSub","ver","setVer","className","style","margin","backgroundColor","join","type","value","onChange","e","target","onClick","Checkbox","color","fontWeight","map","sentence","key","Button","variant","newSub","newVerb","aVerb","aSub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4f40b86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\n\nconst array1 = [\"one\", \"two\", \"three\", \"four\"]\nconst subject = [\"Kaitlyn\", \"Joanne\", \"Cathy\"];\n\nvar subject_array = [\"Kaitlyn\", \"Cathy\", \"Joanne\", \"coffee\", \"boba tea\", \"chocolate\", \"pizza\", \"dumpling\", \"noodle\"]\nvar verb_array = [\"enjoys\", \"tastes\", \"plays\", \"smells\", \"wants\", \"owns\"]\n// var subject_array = [\"Kaitlyn\"]\n// var verb_array = [\"tastes\"]\n\nfunction App() {\n\n  function filterArr(arr, filterElem) {\n    console.log(arr)\n    console.log(filterElem)\n    let result = []  //?\n    if (arr === null || arr.length === 0 || filterElem === null || filterElem === undefined)  {\n      return result\n    }\n  \n   // Need a for loop to traverse arr, and put right element into result\n    for (let i = 0; i < arr.length; i++){ \n      const elem = arr[i] //起始值為0, i是索引值\n      if (elem !== filterElem){\n        result.push(elem)\n      }\n    }\n\n   return result\n}\n\n\n  const array = subject[0]\n  Math.floor((Math.random()*2)+1);\n\n  const array_name  = subject_array[Math.floor(Math.random() * subject_array.length)];\n  const array_verb  = verb_array[Math.floor(Math.random() * verb_array.length)];\n  const array_obj  = subject_array[Math.floor(Math.random() * subject_array.length)];\n\n  //additemtext  \n  const [itemText, setItemText] = useState(\"\")\n  const handleAddItem = () => {\n    setSub([...sub, itemText])\n    setItemText(\"\")  \n  }\n  //addverbtext\n  const [verbText, setVerbText] = useState(\"\")\n  const handleAddVerb = () => {\n    setVer([...ver, verbText])\n    setVerbText(\"\")\n  }\n\n  //check \n  const [checked, setChecked] = useState(false);\n\n  //console.log(\"here\")\n  //[pair] value, setValue \n  //change value, update component \n  const [name, setName] = useState(array_name);\n  const [verb, setVerb] = useState(array_verb);\n  const [obj, setObj] = useState(array_obj);\n  \n  // initial value \n  const [sentences, setSentences] = useState([`${name} ${verb} ${obj}`]);\n  var targetOfGreeting = \"welcome to my website\";\n\n  // initial value \n  const [sub, setSub] = useState(subject_array);\n  const [ver, setVer] = useState(verb_array);\n  \n  //filtersubarray,  filterobj, filter掉的詞是sub\n  const newSub = filterArr(sub, obj)\n\n\n  const handleClick = () => {\n    const newSub = filterArr(sub, obj) \n    const newVerb = filterArr(ver, verb)\n\n    console.log(newSub)\n    console.log(newVerb)\n\n       //先把用過的詞從array拿走 clear array that contains enjoy\n    if (newVerb.length === 0 || newSub.length === 0 ) {\n      if (checked){\n        setSub(newSub)\n        setVer(newVerb)\n      return\n      }   \n    }\n    // console.log(newVerb)\n    // console.log(newSub)\n    // const aVerb  = newVerb[Math.floor(Math.random() * newVerb.length)]    \n    // const aSub  = newSub[Math.floor(Math.random() * newSub.length)]\n    if (ver.length === 0 || sub.length === 0 ) {\n      return\n    }\n    let aVerb  = ver[Math.floor(Math.random() * ver.length)]\n    let aSub  = sub[Math.floor(Math.random() * sub.length)]\n    \n    if (checked) {\n      aVerb  = newVerb[Math.floor(Math.random() * newVerb.length)]\n      aSub  = newSub[Math.floor(Math.random() * newSub.length)]\n    }\n    else {\n    }\n\n    //把sentences值展開 把sentence值push加進sentences array.push\n    const sentence = `${obj} ${aVerb} ${aSub}`\n    setSentences([...sentences, sentence])\n    \n    //call update 少詞\n    if (checked) {\n      setSub(newSub)\n      setVer(newVerb)\n    }\n    //(x => x != obj) (x => x != verb)\n    // Set name to previous obj\n    setName(obj)\n    // Set verb to a random verb in verb_array\n    setVerb(aVerb)\n    // Set obj to a random obj in subject_array\n    setObj(aSub)\n     \n  //   if (remove verb == 0) {\n  //     return false;\n  // } else {\n  //     return true;\n  // }\n  }\n  return (\n    <div className=\"App\" style={{margin: '50px', backgroundColor: '#cfe8fc'}}>\n      <div>\n       Hello there, { targetOfGreeting }!\n      </div>\n      {/* <ul>\n        <li>Kaitlyn</li>\n        <li>Cathy</li>\n        <li>Joanne</li>\n      </ul>\n      <ol>\n      {subject_array.map((person, i) => (\n        <li key={i}>{person} </li>\n      ))}\n      </ol>\n       */}\n      <ol>\n      <p>List of Items: {sub.join(\" \")} </p>\n      <p>Verbs to choose from: {ver.join(\" \")} </p>\n      </ol>\n      <div style={{margin: '10px'}}>    \n      <input type=\"text\" value={itemText} onChange={(e) => {setItemText(e.target.value)}} />\n      <button onClick={handleAddItem} >Add an item</button>          \n      </div>\n\n      <div>        \n      <input type=\"text\" value={verbText} onChange={(e) => {setVerbText(e.target.value)}} />\n      <button onClick={handleAddVerb} >Add an verb</button>          \n      </div>      \n      {/* <div>\n      <p>Insert Your Own Item: </p>\n      <input type=\"text\"></input><button onClick={handleAddItem}>Add Item</button>\n      </div>\n      <div>\n      <p>Insert Your Own Verb: </p>\n      <input type=\"text\"></input><button onClick={handleAddVerb}>Add Verb</button>\n      </div> */}\n      {/* <div>             \n      <input type=\"checkbox\" checked={checked} onChange={() => {setChecked(!checked)}} />\n      <span><span style={{color:'blue', fontWeight:'bold'}}>Remove verb and object</span> that are used</span>\n      </div> */}\n      <div>             \n      <Checkbox color= \"Primary\" type=\"checkbox\" checked={checked} onChange={() => {setChecked(!checked)}} />\n      <span><span style={{color:'blue', fontWeight:'bold'}}>Remove verb and object</span> that are used</span>\n      </div>\n      <p>Click to see the solitaire</p>\n      <ol>\n      {sentences.map((sentence, i) => (\n        <p key={i}> {sentence} </p>\n      ))}\n      </ol>\n      <div>{sub.length === 0 || ver.length === 0 ? <p>Out of items or verbs...</p > : null}</div>\n    <div>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n        Click me\n      </Button>\n    \n      \n    </div>\n      \n{/*         \n        <p>{}</p> */}\n      {/* COMMAND KC COMMAD KU */}\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}